[tool.poetry]
name = "pansen_aiven"
version = "0.0.1"
description = "Aiven coding challenge"
authors = [
    "pansen <andi@zerotired.com>"
]
license = "MIT"
readme = "README.md"
include = []
packages = [
    # This is required for our namespace package to work
    { include = "pansen" }
]
repository = "https://github.com/pansen/aiven_challenge"
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Topic :: Internet",
    "Topic :: System :: Archiving",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS"
]

[tool.poetry.dependencies]
python = "^3.8.6"

python-dotenv = "*"
pyyaml = "*"
marshmallow = "*"
dacite = "*"
ujson = "*"

aiokafka = "*"
faust-streaming = "*"

asyncpg = "*"

# http client
aiohttp = "*"
httpx = "*"


[tool.poetry.dev-dependencies]
nox = "^2020.8.22"
black = "*"
flakehell = "*"
flake8 = "*"
flake8-bugbear = "*"
flake8-bandit = "*"
pytest = "^6.0.2"
pytest-asyncio = "*"
mypy = "^0.760"
vcrpy = "*"


[tool.poetry.scripts]
producer_pansen_aiven = 'pansen.aiven.producer:run'
consumer_pansen_aiven = 'pansen.aiven.consumer:run'


[tool.flakehell]
exclude = [
    "README.md"
]
format = "colored"
max_line_length = 120
show_source = true

[tool.flakehell.plugins]
# TODO andi: don't know how to globally disable `W503`. This is rather useless,
#  as `black`, which runs before the tests, formats to be invalid for `flake8`.
#"flake8*" = ["-W503"]
flake8-bandit = ["+*", "-S322"]
flake8-bugbear = ["+*"]
flake8-builtins = ["+*"]
flake8-comprehensions = ["+*"]
flake8-darglint = ["+*"]
flake8-eradicate = ["+*"]
flake8-isort = ["+*"]
flake8-mutable = ["+*"]
flake8-pytest-style = ["+*"]
mccabe = ["+*"]
pep8-naming = ["+*"]
pycodestyle = ["+*"]
pyflakes = ["+*"]
pylint = ["+*"]

[tool.flakehell.exceptions."**/test*.py"]
# Don't be picky in tests
"flake8*" = ["-*"]


[build-system]
requires = ["poetry>=0.12", "setuptools", "wheel"]
build-backend = "poetry.masonry.api"


